<?xml version="1.0" encoding="UTF-8"?>
<!--
格式定义参见Log4j-config.xsd

log文件定位顺序：
    log4j2-test.properties -> log4j2-test.yaml -> log4j2-test.json -> log4j2-test.xml
 -> log4j2.yaml -> log4j2.json -> log4j2.xml
-->
<!-- 如果配置了monitorInterval，那么log4j2每隔一段时间就会检查一遍这个文件是否修改。最小是5s -->
<Configuration monitorInterval="10" packages="io.entropy.log">
    <!--全局属性-->
    <Properties>
        <Property name="APP_NAME">entropy</Property>
        <Property name="LOG_FILE_PATH">d:/temp/logs/cxf</Property>
        <!--设置日志输出格式-->
        <Property name="PATTERN_FORMAT">%d{HH:mm:ss.SSS} %c %-5level - %msg%xEx%n</Property>
    </Properties>

    <!-- 通过EntropyLogContext可以跳过具体logger的log级别设定，确定是否输出log -->
    <EntropyLogFilter/>

    <Appenders>
        <!--控制台输出-->
        <Console name="STDOUT" target="SYSTEM_OUT">
            <!--  %class{36} %L %M会打印出 类名，行号以及方法名
                %xEx 打印异常堆栈, 与%ex的区别在于还打印了堆栈中每一行对应函数所在的jar文件名
                %n 表示当前平台下的换行符，对应\n或者\r\n
                %t 打印线程名   %T 打印线程ID
                %c 打印logger名称
            -->

            <PatternLayout pattern="${PATTERN_FORMAT}"/>
            <!--
            <EntropyLogLayout />
            -->

        </Console>

        <Console name="STDERR" target="SYSTEM_ERR">
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
        </Console>

        <!--输出到文件-->
        <RollingRandomAccessFile name="RollingFile" fileName="${LOG_FILE_PATH}/entropy-app.log" immediateFlush="false" append="true"
                                 filePattern="${LOG_FILE_PATH}/${date:yyyy-MM}/entropy-app-%d{yyyyMMdd}-%i.log.gz">


            <!--
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %c - %msg%xEx%n"/>
            -->

            <Policies>
                <SizeBasedTriggeringPolicy size="200 MB"/>
                <!-- 这里的interval属性的单位采用filePattern中的时间单位-->
                <TimeBasedTriggeringPolicy interval="1" />
            </Policies>
            <!--自动删除超过60天的日志压缩文件-->
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_FILE_PATH}" maxDepth="2">
                    <IfFileName glob="*/entropy-app-*.log.gz"/>
                    <IfLastModified age="60d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>

        <!--错误日志单独写入文件-->
        <RollingRandomAccessFile name="RollingFileError" fileName="${LOG_FILE_PATH}/entropy-app-err.log"
                                 immediateFlush="false"  append="true"
                                 filePattern="${LOG_FILE_PATH}/${date:yyyy-MM}/entropy-app-err-%d{yyyyMMdd}-%i.log.gz">
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
            <Policies>
                <SizeBasedTriggeringPolicy size="200 MB"/>
                <TimeBasedTriggeringPolicy interval="1" />
            </Policies>
            <!--自动删除超过60天的日志压缩文件-->
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_FILE_PATH}" maxDepth="2">
                    <IfFileName glob="*/entropy-app-err-*.log.gz"/>
                    <IfLastModified age="60d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>


    </Appenders>

    <Loggers>
        <!-- 指定某个包使用指定的输出级别.  -->
        <AsyncLogger name="io.entropy.web" level="debug" additivity="false">
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="RollingFile"/>
            <AppenderRef ref="RollingFileError" level="error"/>
            <AppenderRef ref="Notify" />
        </AsyncLogger>

        <AsyncLogger name="io.entropy.resource" level="debug" additivity="false">
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="RollingFile"/>
            <AppenderRef ref="RollingFileError" level="error"/>
            <AppenderRef ref="Notify" />
        </AsyncLogger>

        <!-- 使用异步输出. 如果上面再使用additive=true则会出现并发修改冲突 -->
        <AsyncRoot level="debug">
            <AppenderRef ref="STDOUT"/>

            <!--
            <AppenderRef ref="STDERR" level="error"/>
            -->

            <!--写入debug级别-->
            <AppenderRef ref="RollingFile"/>
            <!--写入error级别-->
            <AppenderRef ref="RollingFileError" level="error"/>


        </AsyncRoot>


    </Loggers>
</Configuration>